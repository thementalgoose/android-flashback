import com.github.triplet.gradle.androidpublisher.ResolutionStrategy

apply plugin: 'com.android.application'

apply from: rootDir.absolutePath + "/gradle/config-android.gradle"
apply from: rootDir.absolutePath + "/gradle/config-util.gradle"
apply from: rootDir.absolutePath + "/gradle/config-junit5.gradle"
apply from: rootDir.absolutePath + "/gradle/config-compose.gradle"
apply from: rootDir.absolutePath + "/gradle/config-compose-providers.gradle"
apply from: rootDir.absolutePath + "/gradle/config-hilt.gradle"
apply from: rootDir.absolutePath + "/gradle/config-room.gradle"

apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.google.firebase.firebase-perf'

apply from: rootDir.absolutePath + "/gradle/script-remoteconfig.gradle"

android {
    compileSdk project.ext.compileSdk

    defaultConfig {
        testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
        applicationId "tmg.flashback"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode // generatedVersionCode
        versionName project.ext.versionName // generatedVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "flashback.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/*']
        }
        resources {
            excludes += ['win32-x86-64/attach_hotspot_windows.dll', 'win32-x86/attach_hotspot_windows.dll', 'META-INF/LGPL2.1', 'META-INF/AL2.0', 'META-INF/licenses/ASM', 'META-INF/*']
        }
    }


    flavorDimensions += 'version'
    productFlavors {
        sand {
            isDefault.set(true)
            dimension 'version'
            applicationIdSuffix '.sandbox'
            versionNameSuffix '-sandbox'

            buildConfigField "int", "ENVIRONMENT", '1'
            buildConfigField "String", "BASE_URL", '"' + project.ext.baseUrl + '"'
            buildConfigField "String", "CONTACT_EMAIL", '"' + project.ext.contactEmail + '"'

            resValue "string", "app_version_name", project.ext.versionName

            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

        live {
            dimension 'version'

            buildConfigField "int", "ENVIRONMENT", '0'
            buildConfigField "String", "BASE_URL", '"' + project.ext.baseUrl + '"'
            buildConfigField "String", "CONTACT_EMAIL", '"' + project.ext.contactEmail + '"'

            resValue "string", "app_version_name", project.ext.versionName

            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }
    }
    namespace 'tmg.flashback'
}

play {
    track = 'internal'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "flashback.json")
    defaultToAppBundles = true
    resolutionStrategy = ResolutionStrategy.IGNORE
}

// Adds generate tasks to assemble
tasks.configureEach { task ->
    if (task.name.contains("assemble")) {
        task.dependsOn generateRemoteConfigDefaults
    }
}

dependencies {

    // Feature modules
    implementation(projects.feature.rss.core)
    implementation(projects.feature.rss.contract)
    implementation(projects.feature.maintenance.core)
    implementation(projects.feature.maintenance.contract)
    implementation(projects.feature.privacypolicy)
    implementation(projects.feature.widgetUpnext.core)
    implementation(projects.feature.widgetUpnext.contract)
    implementation(projects.feature.drivers)
    implementation(projects.feature.constructors)
    implementation(projects.feature.circuits)
    implementation(projects.feature.season.contract)
    implementation(projects.feature.season.core)
    implementation(projects.feature.search.contract)
    implementation(projects.feature.search.core)
    implementation(projects.feature.weekend)
    implementation(projects.feature.reactiongame)
    implementation(projects.feature.sandbox.contract)
    sandImplementation(projects.feature.sandbox.core)
    liveImplementation(projects.feature.sandbox.noop)

    // Data
    implementation(projects.data.repo)
    implementation(projects.data.persistence)
    implementation(projects.network.flashback)
    implementation(projects.network.flashbackNews)
    implementation(projects.formula1)

    // Core modules
    implementation(projects.core.ads.ads)
    debugImplementation(projects.core.ads.adsAdmob)
    releaseImplementation(projects.core.ads.adsNoop)
    implementation(projects.core.metrics.googleanalytics)
    implementation(projects.core.metrics.crashlytics)
    implementation(projects.core.appshortcuts)
    implementation(projects.core.configuration)
    implementation(projects.core.device)
    implementation(projects.core.notifications)
    implementation(projects.core.preferences)
    implementation(projects.core.reviews)
    implementation(projects.core.webbrowser)

    implementation(projects.presentation.ui)
    implementation(projects.presentation.style)
    implementation(projects.presentation.strings)
    implementation(projects.presentation.navigation)

    implementation(projects.eastereggs)

    implementation libs.bundles.androidx.workmanager

    implementation libs.androidx.splashscreen

    implementation libs.material

    implementation libs.tmg.aboutthisapp
    implementation libs.tmg.utils

    implementation libs.falcon
    implementation libs.shakey
    implementation libs.circleimageview

    // Notifications + Config
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.auth
    implementation libs.firebase.analytics
    implementation libs.firebase.common
    implementation libs.firebase.config
    implementation libs.firebase.crashlytics
    implementation libs.firebase.messaging
    implementation libs.firebase.perf

    // Test Utils
    testImplementation(testFixtures(projects.formula1))
    testImplementation(projects.feature.sandbox.core)

    // Android Test
    androidTestImplementation libs.bundles.androidxtest
    androidTestImplementation libs.test.junit5.core
    androidTestRuntimeOnly libs.test.junit5.runner
    androidTestImplementation libs.junit5.api
    androidTestImplementation libs.junit5.engine
    androidTestImplementation libs.junit5.params
    androidTestRuntimeOnly libs.junit5.engine
}

apply plugin: 'com.google.gms.google-services'

def isDebug() {
    return gradle.startParameter.taskNames.any { it.toLowerCase().contains("debug") }
}
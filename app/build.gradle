import com.github.triplet.gradle.androidpublisher.ResolutionStrategy
import groovy.json.JsonBuilder
import groovy.xml.MarkupBuilder

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'koin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'com.github.triplet.play'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "tmg.flashback"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 46
        versionName "5.6.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "flashback.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += kotlinCompilerArgs
    }

    flavorDimensions 'version'
    productFlavors {
        sand {
            dimension 'version'
            applicationIdSuffix '.sand'
            versionNameSuffix '-sand'

            buildConfigField "int", "ENVIRONMENT", '1'
        }

        live {
            dimension 'version'

            buildConfigField "int", "ENVIRONMENT", '0'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.resources.srcDirs += 'src/androidTest/res'
        test.java.srcDirs += 'src/test/java'
    }

    testOptions {
        junitPlatform {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                afterSuite { desc, result ->
                    if (!desc.parent) {
                        println "\n======================================================================="
                        println "${desc.displayName}"
                        println "Test result: ${result.resultType}"
                        println "Test summary: ${result.testCount} tests, " +
                                "${result.successfulTestCount} succeeded, " +
                                "${result.failedTestCount} failed, " +
                                "${result.skippedTestCount} skipped"
                        println "======================================================================="
                    }
                }
                useJUnitPlatform()
                testLogging {
                    showStandardStreams = true
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
        animationsDisabled = true
    }

    packagingOptions {
        exclude "META-INF/LICENSE*"
    }
}

play {
    track = 'internal'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "flashback.json")
    defaultToAppBundles = true
    resolutionStrategy = ResolutionStrategy.IGNORE
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

task generateRemoteConfigDefaults {

    println("Remote config default - Generating file")

    def year = new Date().format('yyyy')

    def supportedSeasonsModel = new Object()
    supportedSeasonsModel.metaClass.seasons = []
    for (item in 1950..year.toInteger()) {
        def season = new Object()
        season.metaClass.s = item
        supportedSeasonsModel.seasons.add(season)
    }
    def jsonBuilder = new JsonBuilder()
    jsonBuilder(supportedSeasonsModel)
    def supportedSeasons = jsonBuilder.toString()

    def filePath = project.projectDir.absolutePath + "/../app-firebase/src/main/res/xml/remote_config_defaults.xml"
    new File(filePath).getParentFile().mkdirs()
    new File(filePath).withWriter { writer ->
        def xmlBuilder = new MarkupBuilder(writer)
        xmlBuilder.doubleQuotes = true
        xmlBuilder.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

        xmlBuilder.defaultsMap {
            entry {
                key('default_year')
                value(year)
            }
            entry {
                key('up_next')
                value()
            }
            entry {
                key('banner')
                value()
            }
            entry {
                key('data_provided')
                value('Data provided by Ergast API')
            }
            entry {
                key('search')
                value('false')
            }
            entry {
                key('supported_seasons')
                value(supportedSeasons)
            }
            entry {
                key('rss')
                value('false')
            }
            entry {
                key('rss_add_custom')
                value('true')
            }
            entry {
                key('rss_supported_sources')
                value('{"sources":[{"rssLink":"https://www.autosport.com/rss/feed/f1","sourceShort":"AS","source":"https://www.autosport.com","colour":"#FF0000","textColour":"#ffffff","title":"Autosport","contactLink":"https://www.autosport.com/contact/"},{"rssLink":"https://crash.net/rss/f1","sourceShort":"C","source":"https://www.crash.net","colour":"#E91B1C","textColour":"#ffffff","title":"Crash.net","contactLink":"https://www.crash.net/contact"},{"rssLink":"https://motorsport.com/rss/f1/news/","sourceShort":"MS","source":"https://www.motorsport.com","colour":"#FFD806","textColour":"#181818","title":"Motorsport","contactLink":"https://www.motorsport.com/info/contact/"},{"rssLink":"https://www.pitpass.com/fes_php/fes_usr_sit_newsfeed.php","sourceShort":"PP","source":"https://www.pitpass.com","colour":"#611818","textColour":"#ffffff","title":"PitPass","contactLink":"https://www.pitpass.com/contact-us"},{"rssLink":"https://www.f1-fansite.com/feed/","sourceShort":"FF","source":"https://www.f1-fansite.com","colour":"#DF2C19","textColour":"#ffffff","title":"F1 Fansite","contactLink":"https://www.f1-fansite.com/about-us/"},{"rssLink":"https://feeds.bbci.co.uk/sport/formula1/rss.xml","sourceShort":"BBC","source":"https://www.bbc.co.uk","colour":"#FFD04C","textColour":"#181818","title":"BBC Sport","contactLink":"https://www.bbc.co.uk/sport/15561348"},{"rssLink":"https://www.theguardian.com/sport/formulaone/rss","sourceShort":"TG","source":"https://www.theguardian.com","colour":"#002B60","textColour":"#ffffff","title":"The Guardian","contactLink":"https://www.theguardian.com/help/contact-us"},{"rssLink":"https://wtf1.com/feed/","sourceShort":"WTF","source":"https://wtf1.com","colour":"#F66733","textColour":"#ffffff","title":"WTF1","contactLink":"https://wtf1.com/about-us/"},{"rssLink":"https://www.grandprix247.com/feed/","sourceShort":"GP","source":"https://www.grandprix247.com","colour":"#BD0216","textColour":"#ffffff","title":"GrandPrix247","contactLink":"https://www.grandprix247.com/contact/"},{"rssLink":"https://en.f1i.com/news/feed","sourceShort":"F1I","source":"https://en.f1i.com","colour":"#EC192D","textColour":"#ffffff","title":"F1i","contactLink":"https://f1i.com/contact"},{"rssLink":"https://www.f1technical.net/rss/news.xml","sourceShort":"FT","source":"https://www.f1technical.net/","colour":"#2E6A9B","textColour":"#ffffff","title":"F1Technical","contactLink":"https://www.f1technical.net/pr/feedback.php"}]}')
            }
        }
    }

    println("Remote config defaults - file generated")
    println(new File(filePath).text)
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("assemble")) {
        task.dependsOn generateRemoteConfigDefaults
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation project(path: ':app-repo')
    implementation project(path: ':app-firebase')
    implementation project(path: ':rss')

    // Unit Testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "io.mockk:mockk:$mockk"

    // Android Test
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.2.0"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.2.0"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junit"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-engine:$junit"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-params:$junit"
    androidTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit"
    androidTestImplementation "io.mockk:mockk-android:$mockk"
    androidTestImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation('com.schibsted.spain:barista:3.7.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

    kaptTest "androidx.lifecycle:lifecycle-compiler:2.2.0"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$android_lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$android_lifecycle"

    // Material components
    implementation "com.google.android.material:material:$android_material"

    // ConstraintLayout
    implementation "androidx.constraintlayout:constraintlayout:$android_constraint"

    // Swipe refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh"

    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-scope:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-ext:$koin_version"



    // ThreeTen
    implementation "com.jakewharton.threetenabp:threetenabp:$threeten"
    testImplementation ("org.threeten:threetenbp:$threetenbp") {
        exclude group:'com.jakewharton.threetenabp', module:'threetenabp'
    }

    // Swipe dismiss
    implementation "com.r0adkll:slidableactivity:$slidr"

    // Progress bar
    implementation 'com.aswin:CustomArc:1.0.2'

    // Fast indicator
    implementation 'com.reddit:indicator-fast-scroll:1.3.0'

    // TMG dependencies
    implementation "com.github.thementalgoose:android-components:$tmg_components"
    implementation "com.github.thementalgoose:android-utilities:$tmg_utils"
    implementation "com.github.thementalgoose:android-labelled-progress-bar:$tmg_labelled_progressbar"

    // Preferences
    implementation "androidx.preference:preference-ktx:1.1.1"

    // Flagkit
    implementation 'com.jwang123.flagkit:flagkit:1.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // BugShaker
    implementation 'com.github.stkent:bugshaker:1.4.1'

    // Indicator scroller
    implementation 'com.reddit:indicator-fast-scroll:1.3.0'

    // Lottie
    implementation "com.airbnb.android:lottie:$lottie"

    // Skeleton Layout
    implementation 'com.faltenreich:skeletonlayout:2.0.1'


    // Discord Overlapping panels
    implementation 'com.github.discord:OverlappingPanels:0.1.1'


    // Notifications + Config
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom")
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-config'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
}

apply plugin: 'com.google.gms.google-services'
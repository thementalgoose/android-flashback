import com.github.triplet.gradle.androidpublisher.ResolutionStrategy

apply plugin: 'com.android.application'
apply from: rootDir.absolutePath + "/gradle/config-android.gradle"
apply from: rootDir.absolutePath + "/gradle/config-util.gradle"
apply from: rootDir.absolutePath + "/gradle/config-junit5.gradle"
apply from: rootDir.absolutePath + "/gradle/config-compose.gradle"
apply from: rootDir.absolutePath + "/gradle/config-compose-providers.gradle"
apply from: rootDir.absolutePath + "/gradle/config-hilt.gradle"

apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.google.firebase.firebase-perf'

apply from: rootDir.absolutePath + "/gradle/script-remoteconfig.gradle"
apply from: rootDir.absolutePath + "/gradle/script-releasenotes.gradle"

android {
    compileSdkVersion project.ext.compileSdkVersion

    defaultConfig {
        applicationId "tmg.flashback"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode // generatedVersionCode
        versionName project.ext.versionName // generatedVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "flashback.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude "win32-x86-64/attach_hotspot_windows.dll"
        exclude "win32-x86/attach_hotspot_windows.dll"
        exclude "META-INF/LGPL2.1"
        exclude "META-INF/AL2.0"
        exclude "META-INF/licenses/ASM"
        exclude "META-INF/*"
    }

    flavorDimensions 'version'
    productFlavors {
        sand {
            isDefault.set(true)
            dimension 'version'
            applicationIdSuffix '.sand'
            versionNameSuffix '-sand'

            buildConfigField "int", "ENVIRONMENT", '1'
            buildConfigField "String", "BASE_URL", '"' + project.ext.baseUrl + '"'
            buildConfigField "String", "CONTACT_EMAIL", '"' + project.ext.contactEmail + '"'

            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

        live {
            dimension 'version'

            buildConfigField "int", "ENVIRONMENT", '0'
            buildConfigField "String", "BASE_URL", '"' + project.ext.baseUrl + '"'
            buildConfigField "String", "CONTACT_EMAIL", '"' + project.ext.contactEmail + '"'

            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }
    }
}

play {
    track = 'internal'
    serviceAccountCredentials = file(System.getenv("PRIVATE_KEY") ?: "flashback.json")
    defaultToAppBundles = true
    resolutionStrategy = ResolutionStrategy.IGNORE
}

// Adds generate tasks to assemble
tasks.whenTaskAdded { task ->
    if (task.name.contains("assemble")) {
        task.dependsOn generateRemoteConfigDefaults
    }
    if (task.name.contains("assemble")) {
        task.dependsOn generateReleaseNotes
    }
}

dependencies {

    // Feature modules
    implementation project(path: ":feature:stats")
    implementation project(path: ":feature:rss")
    implementation project(path: ':feature:settings')
    implementation project(path: ':feature:forceupgrade')
    implementation project(path: ':feature:releasenotes')
    implementation project(path: ":feature:widgets")
    debugImplementation project(path: ":feature:debug")
    debugImplementation project(path: ":ads:ads")
    releaseImplementation project(path: ":feature:debug-noop")

    // Data
    implementation project(path: ':data:repo')
    implementation project(path: ':data:room')
    implementation project(path: ':data:network')
    implementation project(path: ":formula1")

    // Core modules
    implementation project(path: ":ads:ads-config")
    implementation project(path: ":core:analytics")
    implementation project(path: ":core:appshortcuts")
    implementation project(path: ":core:configuration")
    implementation project(path: ":core:crash-reporting")
    implementation project(path: ":core:device")
    implementation project(path: ":core:notifications")
    implementation project(path: ":core:preferences")
    implementation project(path: ":core:webbrowser")

    implementation project(path: ":presentation:ui")
    implementation project(path: ":presentation:style")

    implementation project(path: ":eastereggs")

    implementation libs.bundles.androidx.workmanager

    implementation libs.androidx.splashscreen

    implementation libs.tmg.aboutthisapp
    implementation libs.tmg.utils
    implementation libs.tmg.labelledprogressbar

    implementation libs.falcon
    implementation libs.shakey
    implementation libs.lottie
    implementation libs.skeletonlayout
    implementation libs.circleimageview

    // Notifications + Config
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.auth
    implementation libs.firebase.analytics
    implementation libs.firebase.common
    implementation libs.firebase.config
    implementation libs.firebase.crashlytics
    implementation libs.firebase.messaging
    implementation libs.firebase.perf

    // Test Utils
    testImplementation project(':test:models')

    // Android Test
    androidTestImplementation libs.bundles.androidxtest
    androidTestImplementation libs.test.junit5.core
    androidTestRuntimeOnly libs.test.junit5.runner
    androidTestImplementation libs.junit5.api
    androidTestImplementation libs.junit5.engine
    androidTestImplementation libs.junit5.params
    androidTestRuntimeOnly libs.junit5.engine
}

apply plugin: 'com.google.gms.google-services'

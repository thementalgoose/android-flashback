name: Release
'on':
  release:
    types: [published]
  workflow_dispatch:
jobs:

  json_checker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: json-syntax-check
        uses: limitusus/json-syntax-check@v1
        with:
          pattern: "\\.json$"

  unit_test:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Caching gradle
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Environment
      - name: Environment variables
        run: |
          echo ${{ secrets.ENCODED_GOOGLE_SERVICES_LIVE }} | base64 --decode >> app/src/live/google-services.json
          echo ${{ secrets.ENCODED_KEYSTORE }} | base64 --decode >> flashback.keystore
          echo ${{ secrets.ENCODED_DEPLOYMENT_KEY }} | base64 --decode >> deployment_private_key.json

      # Running unit tests
      - name: Unit tests
        run: ./gradlew testDebugUnitTest

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit_test,json_checker]
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Caching gradle
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Environment
      - name: Environment variables
        run: |
          echo ${{ secrets.ENCODED_GOOGLE_SERVICES_LIVE }} | base64 --decode >> app/src/live/google-services.json
          echo ${{ secrets.ENCODED_KEYSTORE }} | base64 --decode >> flashback.keystore
          echo ${{ secrets.ENCODED_DEPLOYMENT_KEY }} | base64 --decode >> deployment_private_key.json

      # Version tag
      - name: Version Name
        id: get_version_name
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d . -f 3)

      # Release
      - name: Release to internal test track
        env:
          KEYSTORE: ${{ github.workspace }}/flashback.keystore
          PRIVATE_KEY: ${{ github.workspace }}/deployment_private_key.json
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          VERSION_CODE: ${{ steps.get_version_code.outputs.VERSION }}
          VERSION_NAME: ${{ steps.get_version_name.outputs.VERSION }}
        run: ./gradlew publishLiveReleaseBundle

  update_versions:
    runs-on: ubuntu-latest
    needs: deploy
    steps:

      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Version tag
      - name: Version Name
        id: get_version_name
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Output version name
        run: echo ${{ steps.get_version_name.outputs.VERSION }} > version-name.txt

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d . -f 3)
      - name: Output version code
        run: echo ${{ steps.get_version_code.outputs.VERSION }} > version-code.txt

      # README
      - name: README latest version
        run: |
          sh .github/scripts/update-readme.sh ${{ steps.get_version_name.outputs.VERSION }}

      # Commits changes to README
      - name: Commit and push changes
        uses: actions-js/push@master
        with:
          message: Updates version to ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }})
          github_token: ${{ secrets.GITHUB_TOKEN }}

  discord_notify:
    runs-on: ubuntu-latest
    needs: update_versions
    if: always()
    steps:

      # Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Version tag
      - name: Version Name
        id: get_version_name
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      # Version code
      - name: Version Code
        id: get_version_code
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d . -f 3)

      - name: Notify discord of failure
        uses: sarisia/actions-status-discord@v1
        if: failure() || needs.deploy.result == 'failure'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          nodetail: true
          title: "Release ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }}) deployment to internal test track failed"
          description: "Run number ${{ github.run_number }}\n[Action run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          color: 0xff91a4

      - name: Notify discord of success
        uses: sarisia/actions-status-discord@v1
        if: success() && needs.deploy.result != 'failure'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          nodetail: true
          title: "Release ${{ steps.get_version_name.outputs.VERSION }} (${{ steps.get_version_code.outputs.VERSION }}) deployment to internal test track successful"
          description: "Run number ${{ github.run_number }}\n[Action run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          color: 0x35a55f

